from datetime import datetime
from typing import Annotated

from pydantic import EmailStr, Field, validator

from common.schema import SchemaBase


class AuthSchemaBase(SchemaBase):
    """üîê –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    email: EmailStr
    password: Annotated[str, Field(min_length=6, max_length=50)]
    username: Annotated[str, Field(min_length=2, max_length=20, pattern=r'^[a-zA-Z0-9_.-]+$')]

    @validator('password')
    def validate_password(cls, v):
        if not v or v.isspace():
            raise ValueError('Password cannot be empty or contain only spaces')
        return v

    @validator('username')
    def validate_username(cls, v):
        if not v or v.isspace():
            raise ValueError('Username cannot be empty or contain only spaces')
        return v

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "email": "john.doe@company.com",
                    "password": "MySecretPassword123",
                    "username": "john_doe"
                },
                {
                    "email": "admin@example.com", 
                    "password": "AdminPassword2024",
                    "username": "admin_user"
                }
            ]
        }
    }


class AccessTokenBase(SchemaBase):
    """üé´ –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞"""
    access_token: str
    access_token_type: str = 'Bearer'
    access_token_expire_time: datetime


class GetLoginToken(AccessTokenBase):
    """üîÑ –°—Ö–µ–º–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É"""
    refresh_token: str
    refresh_token_type: str = 'Bearer'
    refresh_token_expire_time: datetime


class GetNewToken(AccessTokenBase):
    """üÜï –°—Ö–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
    refresh_token: str
    refresh_token_type: str = 'Bearer'
    refresh_token_expire_time: datetime


class AuthSchemaCreate(AuthSchemaBase):
    """‚úÖ –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    id: int
    created_at: datetime | None = None
    updated_at: datetime | None = None


class AuthSchemaCreatedNewUser(SchemaBase):
    """üéâ –°—Ö–µ–º–∞ –Ω–æ–≤–æ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    id: int
    email: EmailStr
    username: str
    created_time: datetime | None = None
    updated_time: datetime | None = None


class AuthLoginSchema(SchemaBase):
    """üîê –°—Ö–µ–º–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
    email: EmailStr
    password: Annotated[str, Field(min_length=6, max_length=50)]

    @validator('password')
    def validate_password(cls, v):
        if not v or v.isspace():
            raise ValueError('Password cannot be empty or contain only spaces')
        return v

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "email": "john.doe@company.com",
                    "password": "MyPassword123",
                },
                {
                    "email": "admin@example.com",
                    "password": "AdminPassword2024",
                }
            ]
        }
    }


class MeSchema(AuthSchemaCreatedNewUser):
    """üë§ –°—Ö–µ–º–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—è–º–∏"""
    is_superuser: bool
    is_staff: bool

    # –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–≥–æ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥–µ–ª–∏
    # MeSchema(**user)
    class Config:
        from_attributes = True


class PaginationSchema(SchemaBase):
    """üìÑ –°—Ö–µ–º–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    page: Annotated[int, Field(ge=1, le=1000)] = 1
    limit: Annotated[int, Field(ge=1, le=100)] = 10

    @validator('page')
    def validate_page(cls, v):
        if v < 1:
            raise ValueError('Page must be greater than 0')
        return v

    @validator('limit')
    def validate_limit(cls, v):
        if v < 1:
            raise ValueError('Limit must be greater than 0')
        return v
