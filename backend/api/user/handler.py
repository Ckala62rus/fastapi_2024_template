from fastapi import (
    APIRouter,
    Body,
    Depends,
    HTTPException
)
from typing import Annotated
from fastapi.params import Query
from sqlalchemy.ext.asyncio import AsyncSession
from starlette import status
from starlette.requests import Request
from loguru import logger

from api.user.schemas import (
    AuthSchemaBase,
    AuthSchemaCreate,
    AuthLoginSchema,
    PaginationSchema,
)
from api.user.service import (
    UserService,
    user_service
)
from common.response.response_chema import (
    response_base,
    ResponseModel
)
from common.response.response_code import CustomResponseCode
from core.db import get_db
# from middleware.PermissionChecker import PermissionChecker
from middleware.auth_jwt_middleware import JWTBearer

router = APIRouter()


@router.post(
    "/registration",
    summary="üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    description="""
    ## üéØ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ**
    
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. 
    
    ### üìã **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º:**
    - **Email**: –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
    - **Password**: –û—Ç 6 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤  
    - **Username**: –û—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏, —Ç–∏—Ä–µ, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
    
    ### ‚úÖ **–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:**
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–º ID –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏.
    
    ### ‚ùå **–í–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏:**
    - **400**: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    - **422**: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email, —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å –∏ —Ç.–¥.)
    """,
    responses={
        status.HTTP_201_CREATED: {
            "description": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
            "content": {
                "application/json": {
                    "example": {
                        "code": 201,
                        "msg": "Entity was created", 
                        "data": {
                            "id": 123,
                            "email": "newuser@example.com",
                            "username": "new_user",
                            "created_time": "2024-01-15T10:30:00+03:00",
                            "updated_time": None
                        }
                    }
                }
            }
        },
        status.HTTP_400_BAD_REQUEST: {
            "description": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            "content": {
                "application/json": {
                    "example": {
                        "code": 400,
                        "msg": "Bad Request",
                        "data": "User with newuser@example.com already exists"
                    }
                }
            }
        },
        status.HTTP_422_UNPROCESSABLE_ENTITY: {
            "description": "üö´ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "content": {
                "application/json": {
                    "example": {
                        "detail": [
                            {
                                "type": "string_too_short",
                                "loc": ["body", "password"],
                                "msg": "String should have at least 6 characters",
                                "input": "123"
                            }
                        ]
                    }
                }
            }
        }
    },
    tags=["üë§ Authentication"]
)
async def registration(
        credentials: Annotated[AuthSchemaBase, Body(
            description="–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            examples=[
                {
                    "email": "john.doe@company.com",
                    "password": "SecurePassword123",
                    "username": "john_doe"
                },
                {
                    "email": "alice.smith@example.com", 
                    "password": "MyPassword2024",
                    "username": "alice_smith"
                }
            ]
        )],
        db: AsyncSession = Depends(get_db)
) -> ResponseModel:
    try:
        created_user = await UserService().registration(credentials, db)
    except HTTPException as e:
        logger.info(f"Registration error: {e}")
        return await response_base.fail(
            res=CustomResponseCode.HTTP_400,
            data=f"User with {credentials.email} already exists"
        )
    except Exception as e:
        logger.error(f"Registration error: {e}")
        return await response_base.fail(data=str(e))

    logger.info(f"User registered successfully: {created_user.dict}")
    return await response_base.success(
        res=CustomResponseCode.HTTP_201,
        data=created_user
    )


@router.post(
    "/login",
    summary="üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
    description="""
    ## üéØ **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ email –∏ –ø–∞—Ä–æ–ª—é.
    
    ### üîë **–í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã:**
    - **Access Token**: –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º (—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 2 –º–∏–Ω—É—Ç—ã)
    - **Refresh Token**: –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access —Ç–æ–∫–µ–Ω–∞ (—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 7 –¥–Ω–µ–π)
    
    ### üìã **–ü—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞:**
    1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    2. –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–æ–≤
    4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ Redis
    
    ### üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
    - –ü–∞—Ä–æ–ª–∏ —Ö—ç—à–∏—Ä—É—é—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º bcrypt
    - –¢–æ–∫–µ–Ω—ã –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
    """,
    responses={
        status.HTTP_200_OK: {
            "description": "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
            "content": {
                "application/json": {
                    "example": {
                        "code": 200,
                        "msg": "Request was successful",
                        "data": {
                            "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                            "access_token_type": "Bearer",
                            "access_token_expire_time": "2024-01-15T10:32:00+03:00",
                            "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                            "refresh_token_type": "Bearer", 
                            "refresh_token_expire_time": "2024-01-22T10:30:00+03:00"
                        }
                    }
                }
            }
        },
        status.HTTP_400_BAD_REQUEST: {
            "description": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "content": {
                "application/json": {
                    "example": {
                        "code": 400,
                        "msg": "Bad Request", 
                        "data": "Invalid credentials"
                    }
                }
            }
        }
    },
    tags=["üë§ Authentication"]
)
async def login(
        credentials: Annotated[AuthLoginSchema, Body(
            description="–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞",
            examples=[
                {
                    "email": "john.doe@company.com",
                    "password": "SecurePassword123"
                },
                {
                    "email": "admin@example.com",
                    "password": "AdminPassword2024"
                }
            ]
        )],
        db: AsyncSession = Depends(get_db)
) -> ResponseModel:
    try:
        result = await UserService().login(credentials, db)

        logger.info(f"Login successful for user: {credentials.email}")
        return await response_base.success(
            res=CustomResponseCode.HTTP_200,
            data=result.model_dump()
        )
    except HTTPException as e:
        logger.error(f"Login error: {e}")
        return await response_base.fail(
            res=CustomResponseCode.HTTP_400,
            data=f"Invalid credentials"
        )


@router.get(
    "/me",
    summary="üë§ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    description="""
    ## üéØ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    ### üîê **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
    - –í–∞–ª–∏–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization
    
    ### üìä **–í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:**
    - –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (ID, email, username)
    - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (–¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
    - –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (is_superuser, is_staff)
    
    ### üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
    - –≠–Ω–¥–ø–æ–∏–Ω—Ç –∑–∞—â–∏—â–µ–Ω JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    """,
    responses={
        status.HTTP_200_OK: {
            "description": "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            "content": {
                "application/json": {
                    "example": {
                        "code": 200,
                        "msg": "Request was successful",
                        "data": {
                            "id": 123,
                            "email": "john.doe@company.com",
                            "username": "john_doe",
                            "created_time": "2024-01-15T10:30:00+03:00",
                            "updated_time": "2024-01-15T15:45:00+03:00",
                            "is_superuser": False,
                            "is_staff": False
                        }
                    }
                }
            }
        },
        status.HTTP_401_UNAUTHORIZED: {
            "description": "üö´ –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Invalid token or expired token."
                    }
                }
            }
        }
    },
    dependencies=[Depends(JWTBearer())],
    tags=["üë• Users"]
)
async def me(
        request: Request,
        db: AsyncSession = Depends(get_db)
) -> ResponseModel:
    try:
        user = await UserService.me(request.state.user_id, db)
        return await response_base.success(
            res=CustomResponseCode.HTTP_200,
            data=user
        )
    except HTTPException as e:
        return await response_base.fail(
            res=CustomResponseCode.HTTP_400,
            data=f"Error /me route. {e}"
        )


@router.post(
    "/logout",
    summary="üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
    description="""
    ## üéØ **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏**
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
    
    ### üîÑ **–ü—Ä–æ—Ü–µ—Å—Å –≤—ã—Ö–æ–¥–∞:**
    1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
    2. –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ Redis –∫—ç—à–∞
    3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤—ã—Ö–æ–¥–∞
    
    ### üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
    - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    - –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    
    ### ‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
    –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏.
    """,
    responses={
        status.HTTP_200_OK: {
            "description": "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
            "content": {
                "application/json": {
                    "example": {
                        "code": 200,
                        "msg": "Request was successful",
                        "data": "Successfully logged out"
                    }
                }
            }
        },
        status.HTTP_401_UNAUTHORIZED: {
            "description": "üö´ –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Invalid token or expired token."
                    }
                }
            }
        }
    },
    dependencies=[Depends(JWTBearer())],
    tags=["üë§ Authentication"]
)
async def logout(
        request: Request
) -> ResponseModel:
    try:
        result = await user_service.logout(request=request)
        return await response_base.success(data=result)
    except Exception as e:
        logger.error(f"Logout error: {e}")
        return await response_base.fail(data=str(e))


@router.get(
    "/users",
    summary="üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    description="""
    ## üéØ **–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    ### üìÑ **–ü–∞–≥–∏–Ω–∞—Ü–∏—è:**
    - **page**: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ—Ç 1 –¥–æ 1000, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)
    - **limit**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–æ—Ç 1 –¥–æ 100, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)
    
    ### üìä **–í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:**
    - –ú–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    ### üîç **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**
    - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∞–Ω–µ–ª–∏
    - –°–ø–∏—Å–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
    """,
    responses={
        status.HTTP_200_OK: {
            "description": "‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            "content": {
                "application/json": {
                    "example": {
                        "code": 200,
                        "msg": "Request was successful",
                        "data": [
                            {
                                "id": 1,
                                "email": "john.doe@company.com",
                                "username": "john_doe",
                                "created_time": "2024-01-15T10:30:00+03:00",
                                "updated_time": None,
                                "is_superuser": False,
                                "is_staff": False
                            },
                            {
                                "id": 2,
                                "email": "alice.smith@example.com", 
                                "username": "alice_smith",
                                "created_time": "2024-01-16T14:22:00+03:00",
                                "updated_time": "2024-01-16T16:45:00+03:00",
                                "is_superuser": False,
                                "is_staff": True
                            }
                        ]
                    }
                }
            }
        },
        status.HTTP_422_UNPROCESSABLE_ENTITY: {
            "description": "üö´ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏",
            "content": {
                "application/json": {
                    "example": {
                        "detail": [
                            {
                                "type": "greater_than_equal",
                                "loc": ["query", "page"],
                                "msg": "Input should be greater than or equal to 1",
                                "input": 0
                            }
                        ]
                    }
                }
            }
        }
    },
    tags=["üë• Users"]
)
async def get_users(
        pagination: Annotated[PaginationSchema, Depends()],
        db: AsyncSession = Depends(get_db)
) -> ResponseModel:
    try:
        users = await UserService().get_all_users(
            db,
            pagination.limit,
            pagination.page,
        )
        logger.info(f"Retrieved {len(users) if users else 0} users, page: {pagination.page}, limit: {pagination.limit}")
        return await response_base.success(
            res=CustomResponseCode.HTTP_200,
            data=users
        )
    except Exception as e:
        logger.error(f"Error retrieving users: {e}")
        return await response_base.fail(
            res=CustomResponseCode.HTTP_500,
            data=f"Failed to retrieve users: {e}"
        )


@router.post(
    "/token/refresh",
    summary="üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤",
    description="""
    ## üéØ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–æ–≤**
    
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–æ–≤ (access + refresh) –∏—Å–ø–æ–ª—å–∑—É—è –¥–µ–π—Å—Ç–≤—É—é—â–∏–π refresh —Ç–æ–∫–µ–Ω.
    
    ### üîÑ **–ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:**
    1. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ refresh —Ç–æ–∫–µ–Ω–∞
    2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ Redis
    3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö access –∏ refresh —Ç–æ–∫–µ–Ω–æ–≤
    4. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ refresh —Ç–æ–∫–µ–Ω–∞
    5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ Redis
    
    ### ‚è∞ **–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–æ–≤:**
    - **Access Token**: 2 –º–∏–Ω—É—Ç—ã
    - **Refresh Token**: 7 –¥–Ω–µ–π
    
    ### üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
    - –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ refresh —Ç–æ–∫–µ–Ω–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    - –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """,
    responses={
        status.HTTP_200_OK: {
            "description": "‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            "content": {
                "application/json": {
                    "example": {
                        "code": 200,
                        "msg": "Request was successful",
                        "data": {
                            "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                            "access_token_type": "Bearer",
                            "access_token_expire_time": "2024-01-15T10:32:00+03:00",
                            "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                            "refresh_token_type": "Bearer",
                            "refresh_token_expire_time": "2024-01-22T10:30:00+03:00"
                        }
                    }
                }
            }
        },
        status.HTTP_400_BAD_REQUEST: {
            "description": "‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π refresh —Ç–æ–∫–µ–Ω",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Invalid or expired refresh token"
                    }
                }
            }
        },
        status.HTTP_401_UNAUTHORIZED: {
            "description": "üö´ –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç access —Ç–æ–∫–µ–Ω",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Invalid authentication scheme"
                    }
                }
            }
        }
    },
    dependencies=[Depends(JWTBearer())],
    tags=["üë§ Authentication"]
)
async def token_refresh(
        request: Request,
        refresh_token: Annotated[str, Query(
            description="Refresh —Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            example="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        )],
        db: AsyncSession = Depends(get_db)
) -> ResponseModel:
    try:
        result = await user_service.token_refresh(request=request, refresh_token=refresh_token, db=db)
        logger.info(f"Token refreshed successfully for user: {request.state.user_id}")
        return await response_base.success(
            res=CustomResponseCode.HTTP_200,
            data=result.model_dump()
        )
    except HTTPException as e:
        logger.error(f"Token refresh error: {e}")
        # Re-raise HTTPException to let FastAPI handle it with proper HTTP status
        if "Invalid refresh token" in str(e.detail):
            raise e  # Let FastAPI return HTTP 400
        return await response_base.fail(
            res=CustomResponseCode.HTTP_400,
            data=f"Token refresh failed: {e}"
        )
